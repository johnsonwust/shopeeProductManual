__text_start:
__start:
    0033 E5CF      LDI	R28,0x5F
    0034 E0D4      LDI	R29,4
    0035 BFCD      OUT	0x3D,R28
    0036 BFDE      OUT	0x3E,R29
    0037 51C0      SUBI	R28,0x10
    0038 40D0      SBCI	R29,0
    0039 EA0A      LDI	R16,0xAA
    003A 8308      STD	Y+0,R16
    003B 2400      CLR	R0
    003C E6E4      LDI	R30,0x64
    003D E0F0      LDI	R31,0
    003E E010      LDI	R17,0
    003F 36E7      CPI	R30,0x67
    0040 07F1      CPC	R31,R17
    0041 F011      BEQ	0x0044
    0042 9201      ST	R0,Z+
    0043 CFFB      RJMP	0x003F
    0044 8300      STD	Z+0,R16
    0045 E6E2      LDI	R30,0x62
    0046 E0F0      LDI	R31,0
    0047 E6A0      LDI	R26,0x60
    0048 E0B0      LDI	R27,0
    0049 E010      LDI	R17,0
    004A 36E6      CPI	R30,0x66
    004B 07F1      CPC	R31,R17
    004C F021      BEQ	0x0051
    004D 95C8      LPM
    004E 9631      ADIW	R30,1
    004F 920D      ST	R0,X+
    0050 CFF9      RJMP	0x004A
    0051 940E0110  CALL	_main
_exit:
    0053 CFFF      RJMP	_exit
FILE: E:\制版成功\YL-60\YL-60A~2\4.相关例程\28.频率可调方波\main.c
(0001)      
(0002) 	 
(0003) 	  #define uchar unsigned char
(0004)       #define uint  unsigned int
(0005)       #include <iom16v.h>
(0006) 	  #include <macros.h>
(0007) 	  uchar disbuf[4]={1,0,0,0};
(0008) 	  
(0009)       const  uchar  discode[10]={ 0xC0, 0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90 };
(0010) 	  const  uchar  disbit[4]  ={ 0xEF, 0xDF,0xBF,0x7F};
(0011) 	  
(0012) 	  uchar Key1_Flag,Key2_Flag,Key3_Flag;                                      							
(0013)       void delay(void)
(0014)            {
(0015) 		     uchar i;
(0016)              for(i=0;i<255;i++);
_delay:
  i                    --> R16
    0054 2700      CLR	R16
    0055 C001      RJMP	0x0057
    0056 9503      INC	R16
    0057 3F0F      CPI	R16,0xFF
    0058 F3E8      BCS	0x0056
    0059 9508      RET
(0017)            }
(0018) 	  void timer1_init(void)
(0019)          {
(0020) 	      //TCCR1B = 0x00;	   //stop timer
(0021) 	      TCNT1H = 0x00;	   //设置 TC1 的 计数寄存器 高8位值
_timer1_init:
    005A 2422      CLR	R2
    005B BC2D      OUT	0x2D,R2
(0022) 	      TCNT1L = 0x00;	   //设置 TC1 的 计数寄存器 低8位值
    005C BC2C      OUT	0x2C,R2
(0023) 	      //OCR1AH = 0x1C;	   //设置 TC1 的 输出比较寄存器A 高8位值
(0024) 	      //OCR1AL = 0x20;	   //设置 TC1 的 输出比较寄存器A 低8位值
(0025) 	      //OCR1BH = 0x1C;	   //设置 TC1 的 输出比较寄存器B 高8位值
(0026) 	      //OCR1BL = 0x20;	   //设置 TC1 的 输出比较寄存器B 低8位值
(0027) 	      //ICR1H  = 0x1C;	   //设置 TC1 的 输入捕获寄存器 高8位值
(0028) 	      //ICR1L  = 0x20;	   //设置 TC1 的 输入捕获寄存器 低8位值
(0029) 	      //TCCR1A = 0x00;
(0030) 	      TCCR1B = 0x0A;	   //设置TC1 为 CLK/1024分频，启动TC1
    005D E08A      LDI	R24,0xA
    005E BD8E      OUT	0x2E,R24
(0031) 	      MCUCR = 0x00;		   //设置 MCU 的 控制寄存器
    005F BE25      OUT	0x35,R2
(0032) 	      GICR  = 0x00;		   //设置 中断控制寄存器
    0060 BE2B      OUT	0x3B,R2
(0033) 	      TIMSK = TIMSK|0X10;  //设置 定时计数器 的 屏蔽寄存器
    0061 B789      IN	R24,0x39
    0062 6180      ORI	R24,0x10
    0063 BF89      OUT	0x39,R24
    0064 9508      RET
_Set_Process:
  i                    --> R20
  j                    --> R20
    0065 940E0156  CALL	push_gset1
(0034) 	      //SEI();			   //enable interrupts
(0035)          }   
(0036) 	  
(0037) 	   void Set_Process(void) 
(0038)          { 
(0039) 		   uint i,j;
(0040) 		   i=disbuf[3]*1000+disbuf[2]*100+disbuf[1]*10+disbuf[0];
    0067 90200062  LDS	R2,disbuf+2
    0069 E684      LDI	R24,0x64
    006A 9D82      MUL	R24,R2
    006B 0110      MOVW	R2,R0
    006C 91200063  LDS	R18,disbuf+3
    006E 2733      CLR	R19
    006F EE08      LDI	R16,0xE8
    0070 E013      LDI	R17,3
    0071 940E013E  CALL	empy16s
    0073 01A8      MOVW	R20,R16
    0074 0D42      ADD	R20,R2
    0075 1D53      ADC	R21,R3
    0076 90200061  LDS	R2,disbuf+1
    0078 E08A      LDI	R24,0xA
    0079 9D82      MUL	R24,R2
    007A 0D40      ADD	R20,R0
    007B 1D51      ADC	R21,R1
    007C 90200060  LDS	R2,disbuf
    007E 2433      CLR	R3
    007F 0D42      ADD	R20,R2
    0080 1D53      ADC	R21,R3
(0041) 		   j=500/i;
    0081 EF04      LDI	R16,0xF4
    0082 E011      LDI	R17,1
    0083 019A      MOVW	R18,R20
    0084 940E0124  CALL	div16u
    0086 01A8      MOVW	R20,R16
(0042) 		   OCR1AH=j&0xff00;
    0087 01CA      MOVW	R24,R20
    0088 7080      ANDI	R24,0
    0089 BD8B      OUT	0x2B,R24
(0043) 		   OCR1AL=j&0x00ff;
    008A 01CA      MOVW	R24,R20
    008B 7090      ANDI	R25,0
    008C BD8A      OUT	0x2A,R24
    008D 940E0159  CALL	pop_gset1
    008F 9508      RET
_Display:
  i                    --> R20
    0090 940E0156  CALL	push_gset1
(0044)          }
(0045) 		  void Display(void)
(0046)          {  uchar i;
(0047)             for(i=0;i<4;i++)
    0092 2744      CLR	R20
    0093 C01A      RJMP	0x00AE
(0048)               {
(0049) 		       PORTB=discode[disbuf[i]];
    0094 E680      LDI	R24,0x60
    0095 E090      LDI	R25,0
    0096 2FE4      MOV	R30,R20
    0097 27FF      CLR	R31
    0098 0FE8      ADD	R30,R24
    0099 1FF9      ADC	R31,R25
    009A 81E0      LDD	R30,Z+0
    009B 27FF      CLR	R31
    009C E584      LDI	R24,0x54
    009D E090      LDI	R25,0
    009E 0FE8      ADD	R30,R24
    009F 1FF9      ADC	R31,R25
    00A0 91E4      LPM	R30,0(Z)
    00A1 BBE8      OUT	0x18,R30
(0050)                PORTA=disbit[i];
    00A2 E58E      LDI	R24,0x5E
    00A3 E090      LDI	R25,0
    00A4 2FE4      MOV	R30,R20
    00A5 27FF      CLR	R31
    00A6 0FE8      ADD	R30,R24
    00A7 1FF9      ADC	R31,R25
    00A8 91E4      LPM	R30,0(Z)
    00A9 BBEB      OUT	0x1B,R30
(0051)                delay();
    00AA DFA9      RCALL	_delay
(0052)                PORTA=0xff;
    00AB EF8F      LDI	R24,0xFF
    00AC BB8B      OUT	0x1B,R24
    00AD 9543      INC	R20
    00AE 3044      CPI	R20,4
    00AF F320      BCS	0x0094
    00B0 940E0159  CALL	pop_gset1
    00B2 9508      RET
(0053) 			  }      
(0054) 		  }  	
(0055) 		    
(0056)       void Key_Process(void)
(0057) 	     {
_Key_Process:
    00B3 C004      RJMP	0x00B8
(0058) 		  while((PINA&0x80)==0){Display();Key1_Flag=1;}
    00B4 DFDB      RCALL	_Display
    00B5 E081      LDI	R24,1
    00B6 93800066  STS	Key1_Flag,R24
    00B8 9BCF      SBIS	0x19,7
    00B9 CFFA      RJMP	0x00B4
    00BA C004      RJMP	0x00BF
(0059) 		  while((PINA&0x40)==0){Display();Key2_Flag=1;}
    00BB DFD4      RCALL	_Display
    00BC E081      LDI	R24,1
    00BD 93800065  STS	Key2_Flag,R24
    00BF 9BCE      SBIS	0x19,6
    00C0 CFFA      RJMP	0x00BB
    00C1 C004      RJMP	0x00C6
(0060) 		  while((PINA&0x20)==0){Display();Key3_Flag=1;}
    00C2 DFCD      RCALL	_Display
    00C3 E081      LDI	R24,1
    00C4 93800064  STS	Key3_Flag,R24
    00C6 9BCD      SBIS	0x19,5
    00C7 CFFA      RJMP	0x00C2
(0061) 		  if(Key1_Flag==1)
    00C8 91800066  LDS	R24,Key1_Flag
    00CA 3081      CPI	R24,1
    00CB F481      BNE	0x00DC
(0062) 		    {disbuf[2]++;
    00CC 91800062  LDS	R24,disbuf+2
    00CE 5F8F      SUBI	R24,0xFF
    00CF 93800062  STS	disbuf+2,R24
(0063) 			Set_Process();
    00D1 DF93      RCALL	_Set_Process
(0064) 			 if(disbuf[2]==10) disbuf[2]=0;Key1_Flag=0;
    00D2 91800062  LDS	R24,disbuf+2
    00D4 308A      CPI	R24,0xA
    00D5 F419      BNE	0x00D9
    00D6 2422      CLR	R2
    00D7 92200062  STS	disbuf+2,R2
    00D9 2422      CLR	R2
    00DA 92200066  STS	Key1_Flag,R2
(0065) 			}
(0066) 		  if(Key2_Flag==1)
    00DC 91800065  LDS	R24,Key2_Flag
    00DE 3081      CPI	R24,1
    00DF F481      BNE	0x00F0
(0067) 		    {disbuf[1]++;
    00E0 91800061  LDS	R24,disbuf+1
    00E2 5F8F      SUBI	R24,0xFF
    00E3 93800061  STS	disbuf+1,R24
(0068) 			Set_Process();
    00E5 DF7F      RCALL	_Set_Process
(0069) 			 if(disbuf[1]==10) disbuf[1]=0;Key2_Flag=0;
    00E6 91800061  LDS	R24,disbuf+1
    00E8 308A      CPI	R24,0xA
    00E9 F419      BNE	0x00ED
    00EA 2422      CLR	R2
    00EB 92200061  STS	disbuf+1,R2
    00ED 2422      CLR	R2
    00EE 92200065  STS	Key2_Flag,R2
(0070) 			}
(0071) 		  if(Key3_Flag==1)
    00F0 91800064  LDS	R24,Key3_Flag
    00F2 3081      CPI	R24,1
    00F3 F481      BNE	0x0104
(0072) 		    {disbuf[0]++;
    00F4 91800060  LDS	R24,disbuf
    00F6 5F8F      SUBI	R24,0xFF
    00F7 93800060  STS	disbuf,R24
(0073) 			Set_Process();
    00F9 DF6B      RCALL	_Set_Process
(0074) 			 if(disbuf[0]==10) disbuf[0]=0;Key3_Flag=0;
    00FA 91800060  LDS	R24,disbuf
    00FC 308A      CPI	R24,0xA
    00FD F419      BNE	0x0101
    00FE 2422      CLR	R2
    00FF 92200060  STS	disbuf,R2
    0101 2422      CLR	R2
    0102 92200064  STS	Key3_Flag,R2
(0075) 			}
    0104 9508      RET
(0076) 		  }
(0077) 	 
(0078)     
(0079)      
(0080)      void PORT_INT(void)
(0081) 	     {
(0082) 		 
(0083) 		  DDRA=0x00;            
_PORT_INT:
    0105 2422      CLR	R2
    0106 BA2A      OUT	0x1A,R2
(0084)           DDRB=0xFF;
    0107 EF8F      LDI	R24,0xFF
    0108 BB87      OUT	0x17,R24
(0085)           DDRD=0XFF; 
    0109 BB81      OUT	0x11,R24
(0086) 		  DDRC=0xFF;
    010A BB84      OUT	0x14,R24
(0087) 		  PORTA=0x00;
    010B BA2B      OUT	0x1B,R2
(0088)           PORTB=0xFF;
    010C BB88      OUT	0x18,R24
(0089) 		  PORTC=0xFF;
    010D BB85      OUT	0x15,R24
(0090)           PORTD=0xFF;
    010E BB82      OUT	0x12,R24
    010F 9508      RET
(0091) 		 }	  
(0092)       
(0093)          void main (void)
(0094)              { 
(0095) 			   PORT_INT();
_main:
    0110 DFF4      RCALL	_PORT_INT
(0096) 			   timer1_init();		
    0111 DF48      RCALL	_timer1_init
(0097) 			   SEI();
    0112 9478      BSET	7
    0113 C002      RJMP	0x0116
(0098)                   while(1)
(0099)                  {   
(0100) 				    Key_Process();  
    0114 DF9E      RCALL	_Key_Process
(0101) 				    //Set_Process(); 
(0102) 					Display();  
    0115 DF7A      RCALL	_Display
    0116 CFFD      RJMP	0x0114
    0117 9508      RET
_Compare:
    0118 922A      ST	R2,-Y
    0119 B62F      IN	R2,0x3F
    011A 922A      ST	R2,-Y
(0103) 			     }
(0104) 			 }
(0105) 		  
(0106) 
(0107) #pragma interrupt_handler Compare:7                   
(0108)             void Compare(void)
(0109) 			  {PORTC=~PORTC;}
FILE: <library>
    011B B225      IN	R2,0x15
    011C 9420      COM	R2
    011D BA25      OUT	0x15,R2
    011E 9029      LD	R2,Y+
    011F BE2F      OUT	0x3F,R2
    0120 9029      LD	R2,Y+
    0121 9518      RETI
mod16u:
    0122 9468      BSET	6
    0123 C001      RJMP	xdiv16u
div16u:
    0124 94E8      BCLR	6
xdiv16u:
    0125 92EA      ST	R14,-Y
    0126 92FA      ST	R15,-Y
    0127 938A      ST	R24,-Y
    0128 24EE      CLR	R14
    0129 24FF      CLR	R15
    012A E180      LDI	R24,0x10
    012B 0F00      LSL	R16
    012C 1F11      ROL	R17
    012D 1CEE      ROL	R14
    012E 1CFF      ROL	R15
    012F 16E2      CP	R14,R18
    0130 06F3      CPC	R15,R19
    0131 F018      BCS	0x0135
    0132 1AE2      SUB	R14,R18
    0133 0AF3      SBC	R15,R19
    0134 9503      INC	R16
    0135 958A      DEC	R24
    0136 F7A1      BNE	0x012B
    0137 F416      BRTC	0x013A
    0138 2D0E      MOV	R16,R14
    0139 2D1F      MOV	R17,R15
    013A 9189      LD	R24,Y+
    013B 90F9      LD	R15,Y+
    013C 90E9      LD	R14,Y+
    013D 9508      RET
empy16s:
    013E 920A      ST	R0,-Y
    013F 921A      ST	R1,-Y
    0140 938A      ST	R24,-Y
    0141 939A      ST	R25,-Y
    0142 9F02      MUL	R16,R18
    0143 01C0      MOVW	R24,R0
    0144 9F12      MUL	R17,R18
    0145 0D90      ADD	R25,R0
    0146 9F03      MUL	R16,R19
    0147 0D90      ADD	R25,R0
    0148 018C      MOVW	R16,R24
    0149 9199      LD	R25,Y+
    014A 9189      LD	R24,Y+
    014B 9019      LD	R1,Y+
    014C 9009      LD	R0,Y+
    014D 9508      RET
push_gset5:
    014E 92FA      ST	R15,-Y
    014F 92EA      ST	R14,-Y
push_gset4:
    0150 92DA      ST	R13,-Y
    0151 92CA      ST	R12,-Y
push_gset3:
    0152 92BA      ST	R11,-Y
    0153 92AA      ST	R10,-Y
push_gset2:
    0154 937A      ST	R23,-Y
    0155 936A      ST	R22,-Y
push_gset1:
    0156 935A      ST	R21,-Y
    0157 934A      ST	R20,-Y
    0158 9508      RET
pop_gset1:
    0159 E0E1      LDI	R30,1
pop:
    015A 9149      LD	R20,Y+
    015B 9159      LD	R21,Y+
    015C FDE0      SBRC	R30,0
    015D 9508      RET
    015E 9169      LD	R22,Y+
    015F 9179      LD	R23,Y+
    0160 FDE1      SBRC	R30,1
    0161 9508      RET
    0162 90A9      LD	R10,Y+
    0163 90B9      LD	R11,Y+
    0164 FDE2      SBRC	R30,2
    0165 9508      RET
    0166 90C9      LD	R12,Y+
    0167 90D9      LD	R13,Y+
    0168 FDE3      SBRC	R30,3
    0169 9508      RET
    016A 90E9      LD	R14,Y+
    016B 90F9      LD	R15,Y+
    016C 9508      RET
