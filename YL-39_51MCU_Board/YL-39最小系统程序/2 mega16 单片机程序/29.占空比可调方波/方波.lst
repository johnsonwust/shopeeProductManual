__text_start:
__start:
      33 E5CF      LDI	R28,0x5F
      34 E0D4      LDI	R29,4
      35 BFCD      OUT	0x3D,R28
      36 BFDE      OUT	0x3E,R29
      37 51C0      SUBI	R28,0x10
      38 40D0      SBCI	R29,0
      39 EA0A      LDI	R16,0xAA
      3A 8308      STD	Y+0,R16
      3B 2400      CLR	R0
      3C E7E2      LDI	R30,0x72
      3D E0F0      LDI	R31,0
      3E E010      LDI	R17,0
      3F 37E5      CPI	R30,0x75
      40 07F1      CPC	R31,R17
      41 F011      BEQ	0x0044
      42 9201      ST	R0,Z+
      43 CFFB      RJMP	0x003F
      44 8300      STD	Z+0,R16
      45 E5E4      LDI	R30,0x54
      46 E0F0      LDI	R31,0
      47 E6A0      LDI	R26,0x60
      48 E0B0      LDI	R27,0
      49 E010      LDI	R17,0
      4A E000      LDI	R16,0
      4B BF0B      OUT	0x3B,R16
      4C 36E6      CPI	R30,0x66
      4D 07F1      CPC	R31,R17
      4E F021      BEQ	0x0053
      4F 95C8      LPM
      50 9631      ADIW	R30,1
      51 920D      ST	R0,X+
      52 CFF9      RJMP	0x004C
      53 940E 00E9 CALL	_main
_exit:
      55 CFFF      RJMP	_exit
FILE: E:\单片机\开发板专用文件夹\MEGA16开发板资料\4.相关例程\30.占空比可调方波\方波.C
(0001)         #define uchar unsigned char
(0002)         #define uint unsigned int
(0003) 		#define ulong unsigned long
(0004) 		#define Set_Bit(val, bitn)    (val |=(1<<(bitn))) 
(0005) 		#define Clr_Bit(val, bitn)    (val&=~(1<<(bitn))) 
(0006) 		#include <iom16v.h>
(0007)         #include <macros.h>
(0008) 		uchar disbuf[4]={1,0,0,0};
(0009)         uchar  discode[10]={ 0xC0, 0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90 };  //段码表
(0010)         uchar  disbit[4]  ={ 0xFE, 0xFD,0xFB,0xF7}; //选通值   
(0011) 	    uchar Key1_Flag,Key2_Flag,Key3_Flag;                                      							
(0012)         void delay(void)
(0013)            {uchar i;
(0014)              for(i=255;i>0;i--);
_delay:
  i                    --> R16
      56 EF0F      LDI	R16,0xFF
      57 C001      RJMP	0x0059
      58 950A      DEC	R16
      59 E080      LDI	R24,0
      5A 1780      CP	R24,R16
      5B F3E0      BCS	0x0058
      5C 9508      RET
(0015)            }
(0016) 	  void timer1_init(void)
(0017)          {
(0018) 	      TCCR1A = 0xC3;
_timer1_init:
      5D EC83      LDI	R24,0xC3
      5E BD8F      OUT	0x2F,R24
(0019) 	      TCCR1B = 0x02;	   //设置TC1 为 CLK/1024分频，启动TC1
      5F E082      LDI	R24,2
      60 BD8E      OUT	0x2E,R24
      61 9508      RET
(0020)          }   
(0021) 	  
(0022) 	   void Set_Process(void) 
(0023)          { uint i,j;
(0024) 		  
(0025) 		   j=512;
_Set_Process:
  i                    --> Y,+1
  j                    --> R16
      62 E000      LDI	R16,0
      63 E012      LDI	R17,2
(0026) 		   OCR1AH=j&0xff00;
      64 01C8      MOVW	R24,R16
      65 7080      ANDI	R24,0
      66 BD8B      OUT	0x2B,R24
(0027) 		   OCR1AL=j&0x00ff;
      67 01C8      MOVW	R24,R16
      68 7090      ANDI	R25,0
      69 BD8A      OUT	0x2A,R24
      6A 9508      RET
_Display:
  i                    --> R20
      6B 934A      ST	R20,-Y
(0028)          }
(0029) 		  void Display(void)
(0030)          {  uchar i;
(0031)             for(i=0;i<4;i++)
      6C 2744      CLR	R20
      6D C01A      RJMP	0x0088
(0032)               {
(0033) 		         PORTB=discode[disbuf[i]];
      6E E680      LDI	R24,0x60
      6F E090      LDI	R25,0
      70 2FE4      MOV	R30,R20
      71 27FF      CLR	R31
      72 0FE8      ADD	R30,R24
      73 1FF9      ADC	R31,R25
      74 81E0      LDD	R30,Z+0
      75 27FF      CLR	R31
      76 E684      LDI	R24,0x64
      77 E090      LDI	R25,0
      78 0FE8      ADD	R30,R24
      79 1FF9      ADC	R31,R25
      7A 8020      LDD	R2,Z+0
      7B BA28      OUT	0x18,R2
(0034)                  PORTA=disbit[i];
      7C E68E      LDI	R24,0x6E
      7D E090      LDI	R25,0
      7E 2FE4      MOV	R30,R20
      7F 27FF      CLR	R31
      80 0FE8      ADD	R30,R24
      81 1FF9      ADC	R31,R25
      82 8020      LDD	R2,Z+0
      83 BA2B      OUT	0x1B,R2
(0035)                  delay();
      84 DFD1      RCALL	_delay
(0036)                  PORTA=0xff;
      85 EF8F      LDI	R24,0xFF
      86 BB8B      OUT	0x1B,R24
      87 9543      INC	R20
      88 3044      CPI	R20,4
      89 F320      BCS	0x006E
      8A 9149      LD	R20,Y+
      8B 9508      RET
(0037) 			  }      
(0038) 		  }  	  
(0039)       void Key_Process(void)
(0040) 	     {
_Key_Process:
      8C C004      RJMP	0x0091
(0041) 		  while((PINA&0x10)==0){Display();Key1_Flag=1;}
      8D DFDD      RCALL	_Display
      8E E081      LDI	R24,1
      8F 9380 0074 STS	Key1_Flag,R24
      91 9BCC      SBIS	0x19,4
      92 CFFA      RJMP	0x008D
      93 C004      RJMP	0x0098
(0042) 		  while((PINA&0x08)==0){Display();Key2_Flag=1;}
      94 DFD6      RCALL	_Display
      95 E081      LDI	R24,1
      96 9380 0073 STS	Key2_Flag,R24
      98 9BCB      SBIS	0x19,3
      99 CFFA      RJMP	0x0094
      9A C004      RJMP	0x009F
(0043) 		  while((PINA&0x20)==0){Display();Key3_Flag=1;}
      9B DFCF      RCALL	_Display
      9C E081      LDI	R24,1
      9D 9380 0072 STS	Key3_Flag,R24
      9F 9BCD      SBIS	0x19,5
      A0 CFFA      RJMP	0x009B
(0044) 		  if(Key1_Flag==1)
      A1 9180 0074 LDS	R24,Key1_Flag
      A3 3081      CPI	R24,1
      A4 F481      BNE	0x00B5
(0045) 		    {
(0046) 			disbuf[2]++;
      A5 9180 0062 LDS	R24,disbuf+2
      A7 5F8F      SUBI	R24,0xFF
      A8 9380 0062 STS	disbuf+2,R24
(0047) 			Set_Process();
      AA DFB7      RCALL	_Set_Process
(0048) 			if(disbuf[2]==10) disbuf[2]=0;Key1_Flag=0;
      AB 9180 0062 LDS	R24,disbuf+2
      AD 308A      CPI	R24,0xA
      AE F419      BNE	0x00B2
      AF 2422      CLR	R2
      B0 9220 0062 STS	disbuf+2,R2
      B2 2422      CLR	R2
      B3 9220 0074 STS	Key1_Flag,R2
(0049) 			}
(0050) 		  if(Key2_Flag==1)
      B5 9180 0073 LDS	R24,Key2_Flag
      B7 3081      CPI	R24,1
      B8 F481      BNE	0x00C9
(0051) 		    {
(0052) 			disbuf[1]++;
      B9 9180 0061 LDS	R24,disbuf+1
      BB 5F8F      SUBI	R24,0xFF
      BC 9380 0061 STS	disbuf+1,R24
(0053) 			Set_Process();
      BE DFA3      RCALL	_Set_Process
(0054) 			if(disbuf[1]==10) disbuf[1]=0;Key2_Flag=0;
      BF 9180 0061 LDS	R24,disbuf+1
      C1 308A      CPI	R24,0xA
      C2 F419      BNE	0x00C6
      C3 2422      CLR	R2
      C4 9220 0061 STS	disbuf+1,R2
      C6 2422      CLR	R2
      C7 9220 0073 STS	Key2_Flag,R2
(0055) 			}
(0056) 		  if(Key3_Flag==1)
      C9 9180 0072 LDS	R24,Key3_Flag
      CB 3081      CPI	R24,1
      CC F481      BNE	0x00DD
(0057) 		    {
(0058) 			disbuf[0]++;
      CD 9180 0060 LDS	R24,disbuf
      CF 5F8F      SUBI	R24,0xFF
      D0 9380 0060 STS	disbuf,R24
(0059) 			Set_Process();
      D2 DF8F      RCALL	_Set_Process
(0060) 			if(disbuf[0]==10) disbuf[0]=0;Key3_Flag=0;
      D3 9180 0060 LDS	R24,disbuf
      D5 308A      CPI	R24,0xA
      D6 F419      BNE	0x00DA
      D7 2422      CLR	R2
      D8 9220 0060 STS	disbuf,R2
      DA 2422      CLR	R2
      DB 9220 0072 STS	Key3_Flag,R2
(0061) 			}
      DD 9508      RET
(0062) 		  }
(0063) 	 
(0064)     
(0065)      
(0066)      void PORT_INT(void)
(0067) 	     {
(0068) 		     DDRA|=1<<0|1<<1|1<<2|1<<3|0<<4|0<<5;//设置PA0,PA1,PA2为输出,PA4,PA5为输入
_PORT_INT:
      DE B38A      IN	R24,0x1A
      DF 608F      ORI	R24,0xF
      E0 BB8A      OUT	0x1A,R24
(0069) 	         PORTA=0x00;            
      E1 2422      CLR	R2
      E2 BA2B      OUT	0x1B,R2
(0070)              DDRB=0xFF;
      E3 EF8F      LDI	R24,0xFF
      E4 BB87      OUT	0x17,R24
(0071)              PORTB=0xFF;
      E5 BB88      OUT	0x18,R24
(0072) 			 DDRD=0XFF; 
      E6 BB81      OUT	0x11,R24
(0073) 			 PORTD=0xFF;
      E7 BB82      OUT	0x12,R24
      E8 9508      RET
(0074) 		 }	  
(0075)       
(0076)          void main (void)
(0077)              { 
(0078) 			   PORT_INT();
_main:
      E9 DFF4      RCALL	_PORT_INT
(0079) 			   timer1_init();		
      EA DF72      RCALL	_timer1_init
(0080) 			   SEI();
      EB 9478      BSET	7
      EC C002      RJMP	0x00EF
(0081)                   while(1)
(0082)                  {   
(0083) 				    Key_Process();  
      ED DF9E      RCALL	_Key_Process
(0084) 					Display();  
FILE: <library>
      EE DF7C      RCALL	_Display
      EF CFFD      RJMP	0x00ED
      F0 9508      RET
