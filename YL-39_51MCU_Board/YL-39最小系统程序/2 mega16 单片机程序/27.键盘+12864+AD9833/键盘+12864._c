/******************************************************************************/
/*  Name:  LCD12864(St7920/St7921)+AD9833+4*4键盘                                            
/*在端口PD4,PD5（led5,led6）输出PWM脉冲，由于占空比不同，显示亮度不同         */
/*【编写时间】： 2011.07.07
* 【作    者】： 雁翎电子
* 【版    本】： V1.0
* 【网    站】： http://ylelectronic.taobao.com/ 
* 【Q      Q】： 348439350
* 【编译环境】： ICCAVR  
* 【函数功能】： 在端口PD4,PD5（led5,led6）输出PWM脉冲，由于占空比不同，显示亮度不同 
* 【晶    振】:  8M		
* 【芯    片】:  ATMEGA16A	 
* 【硬件连接】： J1短路帽接上    
/******************************************************************************/
/******************************************************************************/
/*硬体接口
/*PB接键盘
/*PD0-----------------------FSYNC---------------------------244 A0--------------
/*PD1-----------------------SCLK----------------------------244 A1--------------
/*PD2-----------------------SDATA---------------------------244 A2--------------
/******************************************************************************/
#include <iom16v.h>
#include <macros.h>
#define Set_Bit(val, bitn)    (val |=(1<<(bitn))) 
#define Clr_Bit(val, bitn)    (val&=~(1<<(bitn))) 
//12864
void Write_char(unsigned char start, unsigned char ddata);
void Send_byte(unsigned char bbyte);
void Delaynms(unsigned int di);
void Lcd_init(void);
void Disp_img(unsigned char const *img);
unsigned char T_1=0,T_2=0,T_3=0,T_4=1,T_5=0,T_6=0,T_7=0;
unsigned char  const key_code[]={0x77,0XB7,0XD7,0XE7,0X7B,0XBB,0XDB,0XEB,
                                 0X7D,0XBD,0XDD,0XED,0X7E,0XBE,0XDE,0XEE};
unsigned char  const ksp[4]=    {0x7F,0xBF,0xDF,0xEF};
unsigned char  num[]=    {"0123456789_:.V"};
unsigned char  welcome[]= {"输出波形:"};
unsigned char  input[]  = {"波型峰值:"};
unsigned char  ouput[]  = {"波形频率:"};
unsigned char  sin[]    = {"正弦波"	 };
unsigned char  sq1[]    = {"方波  "};
unsigned char  angle[]  = {"三角波"};
unsigned char  hz[]     = {"Hz"};
#pragma data:code
/**************************************************************/
 unsigned  char const logo[]={  
/*--  调入了一幅图像：C:\Documents and Settings\lwd\桌面\AVR程序\AVR_12864_串行\b01.bmp  --*/
/*--  宽度x高度=127x63  --*/
/*--  宽度不是8的倍数，现调整为：宽度x高度=128x63  --*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0xF3,0xE0,0x0F,0x8F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0xF3,0xF0,0x0F,0x8F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x07,0xF9,0xF0,0x0F,0x9F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x07,0xF9,0xF8,0x1F,0x9F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x07,0xF9,0xF8,0x1F,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x0F,0xFC,0xF8,0x1F,0x3F,0x1F,0x80,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFC,0x00,
0x00,0x0F,0xFC,0xFC,0x3F,0x3F,0x1F,0x80,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFC,0x00,
0x00,0x0F,0xFC,0x7C,0x3E,0x3E,0x1F,0x80,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFC,0x00,
0x00,0x1F,0xFE,0x7C,0x7E,0x7E,0x3F,0x00,0x20,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,
0x00,0x1F,0xBE,0x7E,0x7E,0x7E,0xFF,0x00,0x70,0x00,0x00,0x0D,0xBF,0xDF,0xB0,0x00,
0x00,0x1F,0x3E,0x3E,0x7C,0x7F,0xFF,0x00,0x70,0x00,0x00,0x1D,0xFF,0xDF,0xB0,0x00,
0x00,0x3F,0x3F,0x3E,0x7C,0xFF,0xFE,0x00,0x70,0x00,0x00,0x1D,0xFF,0xD8,0x30,0x00,
0x00,0x3F,0x1F,0x3F,0xFC,0xFF,0xFC,0x00,0x60,0x00,0x00,0x3D,0xF6,0xD8,0x30,0x00,
0x00,0x3F,0x1F,0x9F,0xF8,0xFF,0xF0,0x00,0xE0,0x00,0x00,0x3D,0xF6,0xDF,0xB0,0x00,
0x00,0x3F,0xFF,0x9F,0xF9,0xFF,0xE0,0x00,0xC0,0x00,0x00,0x7D,0xF6,0xDF,0xB0,0x00,
0x00,0x7F,0xFF,0x9F,0xF9,0xFB,0xE0,0x00,0x40,0x00,0x00,0xED,0xF6,0xD8,0x30,0x00,
0x00,0x7F,0xFF,0xCF,0xF1,0xF3,0xF0,0x00,0x40,0x00,0x00,0xED,0xF6,0xD8,0x30,0x00,
0x00,0x7F,0xFF,0xCF,0xF3,0xF3,0xF0,0x00,0x40,0x00,0x00,0xED,0xF6,0xDF,0xB0,0x00,
0x00,0xFF,0xFF,0xCF,0xF3,0xF1,0xF0,0x00,0x60,0x00,0x01,0xFF,0xFF,0xFF,0xFE,0x00,
0x00,0xF8,0x07,0xE7,0xE3,0xE1,0xF0,0x08,0x20,0x1E,0x01,0xFF,0xFF,0xFF,0xFE,0x00,
0x00,0xF8,0x03,0xE7,0xE7,0xE1,0xF8,0xFF,0x3C,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0xF8,0x03,0xE3,0xE7,0xE1,0xF9,0xFF,0xFF,0xF7,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0xF0,0x01,0xE3,0xC7,0xC0,0xF9,0xE0,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x80,0x7C,0xFC,0xC0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x7F,0xFC,0xF0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x7F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x27,0xFF,0xB0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x37,0xFF,0x10,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x1C,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x0C,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xDF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xBF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0xF8,0x3C,0x00,0xCC,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x1F,0x6C,0x37,0xF1,0x8C,0x00,0x00,0xE7,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0x60,0x6F,0x37,0xFF,0x80,0x00,0xCF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x1F,0xFE,0x6C,0x36,0x79,0x80,0x00,0xEE,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0x60,0xEC,0x36,0x71,0x80,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0xEC,0x6C,0x36,0x79,0x80,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x07,0xF8,0x6C,0x37,0xED,0x80,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x1F,0x30,0x6C,0x36,0x6D,0x80,0x00,0x76,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0x76,0x6C,0x36,0x61,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x03,0xDE,0x6C,0x37,0xE1,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x0F,0x0E,0x6C,0xF6,0x6F,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

/******************************************************************************/
void Lcd_init(void)	//初始化LCD 
{
	Delaynms(10); //启动等待，等LCM讲入工作状态
	Set_Bit(PORTA,0);
  	Write_char(0,0x30);  //8 位介面，基本指令集
	Delaynms(10);
  	Write_char(0,0x0c);  //显示打开，光标关，反白关
	Delaynms(10);
  	Write_char(0,0x01);  //清屏，将DDRAM的地址计数器归零  
	Delaynms(10);
}

/******************************************************************************/
void Write_char(unsigned char start, unsigned char ddata) //写指令或数据
{
	unsigned char start_data,Hdata,Ldata;
  	if(start==0) 
		start_data=0xf8;	 //写指令
    else    
    	start_data=0xfa;  //写数据
  
  	Hdata=ddata&0xf0;		  //取高四位
  	Ldata=(ddata<<4)&0xf0;  //取低四位
  	Send_byte(start_data);	  //发送起始信号
  	Delaynms(10); //延时是必须的
  	Send_byte(Hdata);	      //发送高四位
  	Delaynms(10);  //延时是必须的
  	Send_byte(Ldata);		  //发送低四位
  	Delaynms(10);  //延时是必须的
}

/******************************************************************************/
void Send_byte(unsigned char bbyte) //发送一个字节
{
	unsigned char i,j;
 	for(i=0;i<8;i++)
   	{    
	    
   		j=bbyte&0x80; //取出最高位
 		if(j)
			Set_Bit(PORTA,1);  //液晶发送数据 1
		else
			Clr_Bit(PORTA,1);  //液晶发送数据 0
		Set_Bit(PORTA,2);      //液晶同步脉冲
		Clr_Bit(PORTA,2);      //液晶同步脉冲
   		bbyte<<=1;   //左移
   	}  
}

/******************************************************************************/
void Delaynms(unsigned int di) //延时
{
	unsigned int da,db;
 	for(da=0;da<di;da++)
   		for(db=0;db<10;db++);
}

/****************************************************************************/
void Disp_img(unsigned char const *img )	//图形方式12864显示字模221 横向取膜
{ 
	unsigned char i,j;
	unsigned int k = 0;
    Delaynms(100);//延时好重要!!!!!!AVR太快了
	Write_char(0,0x36); //图形方式
	Delaynms(100);//延时好重要!!!!!!AVR太快了
	for(i=0;i<32;i++)
  	{ 
		Write_char(0,0x80+i); //列
		Write_char(0,0x80);	  //行
    	for(j=0;j<16;j++) 
		{
			Write_char(1,img[k++]);	
		}
  	}

 	for(i=0;i<32;i++)
  	{ 
		Write_char(0,0x80+i);
		Write_char(0,0x88);
    	for(j=0;j<16;j++) 
		{
			Write_char(1,img[k++]);
  		}
	}
}

/******************************************************************************/
void Clr_Scr(void)//清屏函数
{
	Write_char(0,0x01);
}
/******************************************************************************/
void LCD_set_xy( unsigned char x, unsigned char y )
{	//设置LCD显示的起始位置，X为行，Y为列
    unsigned char address;
	switch(x)
	{
		case 0: address = 0x80 + y; break;    
    	case 1: address = 0x80 + y; break; 
		case 2: address = 0x90 + y; break; 
   	 	case 3: address = 0x88 + y; break;
		case 4: address = 0x98 + y; break; 
		default:address = 0x80 + y; break;
	}
    Write_char(0, address);
}
/******************************************************************************/
void LCD_Write_string(unsigned char X,unsigned char Y,unsigned char *s)
{	//	中英文字符串显示函数
	LCD_set_xy( X, Y );   
    while (*s) 
    {
		Write_char( 1, *s );
	    s ++;
		Delaynms(1);
	}
}
/*******************************************************************************/
void LCD_Write_number(unsigned char s)//	数字显示函数
{	
	Write_char(1,num[s]);
	Delaynms(1);
}
/******************************************************************************/
void Lcd_Mark2(void)
{
	Clr_Scr();//清屏
	Clr_Scr();//清屏
	LCD_Write_string(1,0,welcome);//
	LCD_Write_string(2,0,input);
	LCD_Write_string(4,0,ouput);
	LCD_Write_string(3,7,hz);
	LCD_Write_string(0,5,sin);
}
/******************************************************************************/
 void Lcd_write_number(void)
{  
    LCD_set_xy(4,4);LCD_Write_number(11 );LCD_Write_number(T_1);
    LCD_set_xy(4,5);LCD_Write_number(T_2);LCD_Write_number(T_3);
    LCD_set_xy(4,6);LCD_Write_number(T_4);LCD_Write_number(T_5);
	LCD_set_xy(4,7);LCD_Write_number(T_6);LCD_Write_number(T_7);
}

/****************************************************************************/
void AD9833_Send_Word(unsigned int Data_In)

{
   		unsigned char i;
		Set_Bit(PORTD, 1);//SCLK=1;
		Clr_Bit(PORTD, 2);//FSYNC=0;
   		for(i=0;i<16;i++)
   		{
        Set_Bit(PORTD, 1);//SCLK=1;
		if(Data_In & 0x8000)
		Set_Bit(PORTD, 0);//SDATA=1;
		else
		Clr_Bit(PORTD, 0);//SDATA=0;
		Clr_Bit(PORTD, 1);//SCLK=0;
     	Data_In=Data_In<<1;
   		}
		Set_Bit(PORTD, 2);//FSYNC=1;
		Clr_Bit(PORTD, 1);//SCLK=0;
}

//波形发生函数

//入口参数: 频率:Freq (<=12000000)

//          形状:0(正弦波),1(三角波),2(方波)

//默认: Fmclk=25MHz, 0相移，方波不分频.

		void  Wave_Generate(unsigned long Freq,unsigned char Shape)
{
        unsigned int Config_Data[8];
  		unsigned long temp;
   		unsigned char k;
   		if(Freq>12000000) Freq=12000000;
   		switch(Shape)
   		{
     case 0: Config_Data[0]=0x2108;
             Config_Data[7]=0x2008;
             break;
     case 1: Config_Data[0]=0x210A;
             Config_Data[7]=0x200A;
             break;
     case 2: Config_Data[0]=0x2128;
             Config_Data[7]=0x2028;
             break;
     default:Config_Data[0]=0x2108;
             Config_Data[7]=0x2008;

   		}
   		temp=Freq*10.73;   //temp=Freq*(0x10000000/20000000);
   		Config_Data[1]=temp&0x00003fff;
   		Config_Data[3]=Config_Data[1];
   		Config_Data[2]=(temp&0x0fffc000)>>14;
   		Config_Data[4]=Config_Data[2];
   		Config_Data[1]=Config_Data[1]|0x4000;
   		Config_Data[2]=Config_Data[2]|0x4000;
   		Config_Data[3]=Config_Data[3]|0x8000;
   		Config_Data[4]=Config_Data[4]|0x8000;
   		Config_Data[5]=0xC000;
   		Config_Data[6]=0xE000;
  		for(k=0;k<8;k++)
  		{
     	AD9833_Send_Word(Config_Data[k]);
  		}
}
/****************************************************************************/
   void Bcd_Div(unsigned long CV)
{
    T_1=CV/1000000;
	CV=  CV%1000000;
	T_2=CV/100000;
	CV =  CV%100000;
	T_3=CV/10000;
	CV=  CV%10000;
	T_4=CV/1000;
	CV=  CV%1000;
	T_5=CV/100;
	CV=  CV%100;
	T_6=CV/10;
	T_7=CV%10;
}
/******************************************************************************/
/*****************************键盘扫描*****************************************/
unsigned char keypad_scan()
{
    unsigned char key,i;
    PORTB=0xF0;
    while (PINB!=0xF0)
    {  
       for(i=0;i<=3;i++)
       {         
           PORTB=ksp[i];
           if(PINB!=ksp[i])
           {
              Delaynms(1000);
              key=PINB;
              if(key!=ksp[i])
              {
			      while(key==PINB);
                  return(key);
              }
           }
       }
     }
}
// 检查是否有按键按下
unsigned char gotkey()
{
     char temp,i;
     temp=keypad_scan();
     for (i=0;i<=15;i++)
	 {
      if(temp==key_code[i]) return(i);
     }
     return(0xff);
}
/*********************************************************************************/
void main(void)//主函数
{
    unsigned char U,I,S_ape=0,M=0;
	unsigned long X=0,Y=0,Z=0,K=0,A=0,B=0,C=0,D=1000;//D为启动时给9833送1000Hz控制字
	DDRA|=BIT(2)|BIT(3)|BIT(4);//设置PA2,PA3,PA4为输出
	PORTA=0xFF;
	DDRB=0XF0;
	PORTB=0XFF;
	DDRD=0XFF;
	PORTD=0XFF;
	Wave_Generate(1000,0); //1000Hz的正弦波
	Lcd_init();//设置液晶显示器
	Clr_Scr();//清屏	
	Disp_img(logo);	//显示我们的AVR
	Delaynms(30000);//显示画面等待时间
    Lcd_init();
	Lcd_Mark2();
	LCD_set_xy(3,6);LCD_Write_number(10);
	LCD_set_xy(3,5);LCD_Write_number(10);
    LCD_set_xy(3,4);LCD_Write_number(10);
	LCD_set_xy(3,3);LCD_Write_number(10);
    LCD_set_xy(3,2);LCD_Write_number(10);
    LCD_set_xy(3,1);LCD_Write_number(10);
	LCD_set_xy(3,0);LCD_Write_number(10);
    Lcd_write_number();	 
	while(1)
	{
	 U=gotkey();
	 if(U!=255)
	 { 
	   
		 switch(U)
		{ 
		case 0: 
		case 1: 
		case 2: 
		case 3:	
		case 4: 
		case 5:	
		case 6: 
		case 7: 
		case 8: 
		case 9:
		 M++; 
	       switch(M)
	       {
			case 1:LCD_set_xy(3,0);LCD_Write_number(U);X=U; break;
			case 2:LCD_set_xy(3,1);LCD_Write_number(U);Y=U; break;
			case 3:LCD_set_xy(3,2);LCD_Write_number(U);Z=U;	break;
			case 4:LCD_set_xy(3,3);LCD_Write_number(U);K=U; break;
			case 5:LCD_set_xy(3,4);LCD_Write_number(U);A=U;	break;
			case 6:LCD_set_xy(3,5);LCD_Write_number(U);B=U; break;
			case 7:LCD_set_xy(3,6);LCD_Write_number(U);C=U; break;
			default:break;
		    }break;

		case 10: { 
		          LCD_set_xy(3,6);LCD_Write_number(10);X=0;
			      LCD_set_xy(3,5);LCD_Write_number(10);Y=0;
				  LCD_set_xy(3,4);LCD_Write_number(10);Z=0;
			      LCD_set_xy(3,3);LCD_Write_number(10);K=0;
			      LCD_set_xy(3,2);LCD_Write_number(10);A=0;
			      LCD_set_xy(3,1);LCD_Write_number(10);B=0;
			      LCD_set_xy(3,0);LCD_Write_number(10);C=0; M=0;
				  } break; 
		case 11:  {  
		            D=X*1000000+Y*100000+Z*10000+K*1000+A*100+B*10+C;
		            Wave_Generate(D,I); 
					Bcd_Div(D);
				    Lcd_write_number();
				   }break;

		case 12:  { 
 					S_ape++;
					switch(S_ape)
					{ 
					   case 1: I=1;Wave_Generate(D,I); 	LCD_Write_string(0,5,angle);          break;
					   case 2: I=2;Wave_Generate(D,I); 	LCD_Write_string(0,5,sq1);		      break;
		           	   case 3: I=0;Wave_Generate(D,I);  LCD_Write_string(0,5,sin); S_ape=0;   break;
					}
		           } 	break;

		case 13:  {	
		          
				  }     break;

		case 14:  { 
		            
				  }     break;

		case 15:  {  
		             
				  }  break;
				  		  	 
		default:break;   	   
	    }
	 }//END if
    }//END while
} //ENDmain

