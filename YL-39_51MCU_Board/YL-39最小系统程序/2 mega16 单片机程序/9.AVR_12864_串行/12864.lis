                        .module _12864.c
                        .area text(rom, con, rel)
 0000                   .dbfile D:\工作\制版成功\YL-60A~2\YL-60A~2\4.相关例程\9.AVR_12864_串行\12864.c
                        .area code(ram, con, rel)
 0000                   .dbfile D:\工作\制版成功\YL-60A~2\YL-60A~2\4.相关例程\9.AVR_12864_串行\12864.c
                        .area lit(rom, con, rel)
 0000           _logo::
 0000 0000              .byte 0,0
 0002 0000              .byte 0,0
 0004 0000              .byte 0,0
 0006 0000              .byte 0,0
 0008 0000              .byte 0,0
 000A 0000              .byte 0,0
 000C 0000              .byte 0,0
 000E 0000              .byte 0,0
 0010 0000              .byte 0,0
 0012 0000              .byte 0,0
 0014 0000              .byte 0,0
 0016 0000              .byte 0,0
 0018 0000              .byte 0,0
 001A 0000              .byte 0,0
 001C 0000              .byte 0,0
 001E 0000              .byte 0,0
 0020 0000              .byte 0,0
 0022 0000              .byte 0,0
 0024 0000              .byte 0,0
 0026 0000              .byte 0,0
 0028 0000              .byte 0,0
 002A 0000              .byte 0,0
 002C 0000              .byte 0,0
 002E 0000              .byte 0,0
 0030 0000              .byte 0,0
 0032 0000              .byte 0,0
 0034 0000              .byte 0,0
 0036 0000              .byte 0,0
 0038 0000              .byte 0,0
 003A 0000              .byte 0,0
 003C 0000              .byte 0,0
 003E 0000              .byte 0,0
 0040 0000              .byte 0,0
 0042 0000              .byte 0,0
 0044 0000              .byte 0,0
 0046 0000              .byte 0,0
 0048 0000              .byte 0,0
 004A 0000              .byte 0,0
 004C 0000              .byte 0,0
 004E 0000              .byte 0,0
 0050 0000              .byte 0,0
 0052 0000              .byte 0,0
 0054 0000              .byte 0,0
 0056 0000              .byte 0,0
 0058 0000              .byte 0,0
 005A 0000              .byte 0,0
 005C 0000              .byte 0,0
 005E 0000              .byte 0,0
 0060 0000              .byte 0,0
 0062 0000              .byte 0,0
 0064 0000              .byte 0,0
 0066 0000              .byte 0,0
 0068 0000              .byte 0,0
 006A 0000              .byte 0,0
 006C 0000              .byte 0,0
 006E 0000              .byte 0,0
 0070 0000              .byte 0,0
 0072 0000              .byte 0,0
 0074 0000              .byte 0,0
 0076 0000              .byte 0,0
 0078 0000              .byte 0,0
 007A 0000              .byte 0,0
 007C 0000              .byte 0,0
 007E 0000              .byte 0,0
 0080 0000              .byte 0,0
 0082 0000              .byte 0,0
 0084 0000              .byte 0,0
 0086 0000              .byte 0,0
 0088 0000              .byte 0,0
 008A 0000              .byte 0,0
 008C 0000              .byte 0,0
 008E 0000              .byte 0,0
 0090 0000              .byte 0,0
 0092 0000              .byte 0,0
 0094 0000              .byte 0,0
 0096 0000              .byte 0,0
 0098 0000              .byte 0,0
 009A 0000              .byte 0,0
 009C 0000              .byte 0,0
 009E 0000              .byte 0,0
 00A0 0003              .byte 0,3
 00A2 F3E0              .byte 243,224
 00A4 0F8F              .byte 15,143
 00A6 FC00              .byte 252,0
 00A8 0000              .byte 0,0
 00AA 0000              .byte 0,0
 00AC 0000              .byte 0,0
 00AE 0000              .byte 0,0
 00B0 0003              .byte 0,3
 00B2 F3F0              .byte 243,240
 00B4 0F8F              .byte 15,143
 00B6 FE00              .byte 254,0
 00B8 0000              .byte 0,0
 00BA 0000              .byte 0,0
 00BC 0000              .byte 0,0
 00BE 0000              .byte 0,0
 00C0 0007              .byte 0,7
 00C2 F9F0              .byte 249,240
 00C4 0F9F              .byte 15,159
 00C6 FF00              .byte 255,0
 00C8 0000              .byte 0,0
 00CA 0000              .byte 0,0
 00CC 0000              .byte 0,0
 00CE 0000              .byte 0,0
 00D0 0007              .byte 0,7
 00D2 F9F8              .byte 249,248
 00D4 1F9F              .byte 31,159
 00D6 FF00              .byte 255,0
 00D8 0000              .byte 0,0
 00DA 0000              .byte 0,0
 00DC 0000              .byte 0,0
 00DE 0000              .byte 0,0
 00E0 0007              .byte 0,7
 00E2 F9F8              .byte 249,248
 00E4 1F1F              .byte 31,31
 00E6 FF80              .byte 255,128
 00E8 0000              .byte 0,0
 00EA 0000              .byte 0,0
 00EC 0000              .byte 0,0
 00EE 0000              .byte 0,0
 00F0 000F              .byte 0,15
 00F2 FCF8              .byte 252,248
 00F4 1F3F              .byte 31,63
 00F6 1F80              .byte 31,128
 00F8 0000              .byte 0,0
 00FA 0003              .byte 0,3
 00FC FFFF              .byte 255,255
 00FE FC00              .byte 252,0
 0100 000F              .byte 0,15
 0102 FCFC              .byte 252,252
 0104 3F3F              .byte 63,63
 0106 1F80              .byte 31,128
 0108 0000              .byte 0,0
 010A 0007              .byte 0,7
 010C FFFF              .byte 255,255
 010E FC00              .byte 252,0
 0110 000F              .byte 0,15
 0112 FC7C              .byte 252,124
 0114 3E3E              .byte 62,62
 0116 1F80              .byte 31,128
 0118 0000              .byte 0,0
 011A 0007              .byte 0,7
 011C FFFF              .byte 255,255
 011E FC00              .byte 252,0
 0120 001F              .byte 0,31
 0122 FE7C              .byte 254,124
 0124 7E7E              .byte 126,126
 0126 3F00              .byte 63,0
 0128 2000              .byte 32,0
 012A 0001              .byte 0,1
 012C C000              .byte 192,0
 012E 0000              .byte 0,0
 0130 001F              .byte 0,31
 0132 BE7E              .byte 190,126
 0134 7E7E              .byte 126,126
 0136 FF00              .byte 255,0
 0138 7000              .byte 'p,0
 013A 000D              .byte 0,13
 013C BFDF              .byte 191,223
 013E B000              .byte 176,0
 0140 001F              .byte 0,31
 0142 3E3E              .byte 62,62
 0144 7C7F              .byte 124,127
 0146 FF00              .byte 255,0
 0148 7000              .byte 'p,0
 014A 001D              .byte 0,29
 014C FFDF              .byte 255,223
 014E B000              .byte 176,0
 0150 003F              .byte 0,63
 0152 3F3E              .byte 63,62
 0154 7CFF              .byte 124,255
 0156 FE00              .byte 254,0
 0158 7000              .byte 'p,0
 015A 001D              .byte 0,29
 015C FFD8              .byte 255,216
 015E 3000              .byte 48,0
 0160 003F              .byte 0,63
 0162 1F3F              .byte 31,63
 0164 FCFF              .byte 252,255
 0166 FC00              .byte 252,0
 0168 6000              .byte 96,0
 016A 003D              .byte 0,61
 016C F6D8              .byte 246,216
 016E 3000              .byte 48,0
 0170 003F              .byte 0,63
 0172 1F9F              .byte 31,159
 0174 F8FF              .byte 248,255
 0176 F000              .byte 240,0
 0178 E000              .byte 224,0
 017A 003D              .byte 0,61
 017C F6DF              .byte 246,223
 017E B000              .byte 176,0
 0180 003F              .byte 0,63
 0182 FF9F              .byte 255,159
 0184 F9FF              .byte 249,255
 0186 E000              .byte 224,0
 0188 C000              .byte 192,0
 018A 007D              .byte 0,125
 018C F6DF              .byte 246,223
 018E B000              .byte 176,0
 0190 007F              .byte 0,127
 0192 FF9F              .byte 255,159
 0194 F9FB              .byte 249,251
 0196 E000              .byte 224,0
 0198 4000              .byte 64,0
 019A 00ED              .byte 0,237
 019C F6D8              .byte 246,216
 019E 3000              .byte 48,0
 01A0 007F              .byte 0,127
 01A2 FFCF              .byte 255,207
 01A4 F1F3              .byte 241,243
 01A6 F000              .byte 240,0
 01A8 4000              .byte 64,0
 01AA 00ED              .byte 0,237
 01AC F6D8              .byte 246,216
 01AE 3000              .byte 48,0
 01B0 007F              .byte 0,127
 01B2 FFCF              .byte 255,207
 01B4 F3F3              .byte 243,243
 01B6 F000              .byte 240,0
 01B8 4000              .byte 64,0
 01BA 00ED              .byte 0,237
 01BC F6DF              .byte 246,223
 01BE B000              .byte 176,0
 01C0 00FF              .byte 0,255
 01C2 FFCF              .byte 255,207
 01C4 F3F1              .byte 243,241
 01C6 F000              .byte 240,0
 01C8 6000              .byte 96,0
 01CA 01FF              .byte 1,255
 01CC FFFF              .byte 255,255
 01CE FE00              .byte 254,0
 01D0 00F8              .byte 0,248
 01D2 07E7              .byte 7,231
 01D4 E3E1              .byte 227,225
 01D6 F008              .byte 240,8
 01D8 201E              .byte 32,30
 01DA 01FF              .byte 1,255
 01DC FFFF              .byte 255,255
 01DE FE00              .byte 254,0
 01E0 00F8              .byte 0,248
 01E2 03E7              .byte 3,231
 01E4 E7E1              .byte 231,225
 01E6 F8FF              .byte 248,255
 01E8 3C3F              .byte 60,63
 01EA 0000              .byte 0,0
 01EC 0000              .byte 0,0
 01EE 0000              .byte 0,0
 01F0 01F8              .byte 1,248
 01F2 03E3              .byte 3,227
 01F4 E7E1              .byte 231,225
 01F6 F9FF              .byte 249,255
 01F8 FFF7              .byte 255,247
 01FA 8000              .byte 128,0
 01FC 0000              .byte 0,0
 01FE 0000              .byte 0,0
 0200 00F0              .byte 0,240
 0202 01E3              .byte 1,227
 0204 C7C0              .byte 199,192
 0206 F9E0              .byte 249,224
 0208 FFFF              .byte 255,255
 020A C000              .byte 192,0
 020C 0000              .byte 0,0
 020E 0000              .byte 0,0
 0210 0000              .byte 0,0
 0212 0003              .byte 0,3
 0214 C000              .byte 192,0
 0216 0080              .byte 0,128
 0218 7CFC              .byte 124,252
 021A C000              .byte 192,0
 021C 0000              .byte 0,0
 021E 0000              .byte 0,0
 0220 0000              .byte 0,0
 0222 0001              .byte 0,1
 0224 C000              .byte 192,0
 0226 0000              .byte 0,0
 0228 7FFC              .byte 127,252
 022A F000              .byte 240,0
 022C 0000              .byte 0,0
 022E 0000              .byte 0,0
 0230 0000              .byte 0,0
 0232 0001              .byte 0,1
 0234 8000              .byte 128,0
 0236 0000              .byte 0,0
 0238 7FFF              .byte 127,255
 023A F000              .byte 240,0
 023C 0000              .byte 0,0
 023E 0000              .byte 0,0
 0240 0000              .byte 0,0
 0242 0001              .byte 0,1
 0244 8000              .byte 128,0
 0246 0000              .byte 0,0
 0248 27FF              .byte 39,255
 024A B000              .byte 176,0
 024C 0000              .byte 0,0
 024E 0000              .byte 0,0
 0250 0000              .byte 0,0
 0252 0000              .byte 0,0
 0254 8000              .byte 128,0
 0256 0000              .byte 0,0
 0258 37FF              .byte 55,255
 025A 1000              .byte 16,0
 025C 0000              .byte 0,0
 025E 0000              .byte 0,0
 0260 0000              .byte 0,0
 0262 0000              .byte 0,0
 0264 0000              .byte 0,0
 0266 0000              .byte 0,0
 0268 3FFF              .byte 63,255
 026A 1C00              .byte 28,0
 026C 0000              .byte 0,0
 026E 0000              .byte 0,0
 0270 0000              .byte 0,0
 0272 0000              .byte 0,0
 0274 0000              .byte 0,0
 0276 0000              .byte 0,0
 0278 3FFF              .byte 63,255
 027A 0C00              .byte 12,0
 027C 0000              .byte 0,0
 027E 0000              .byte 0,0
 0280 0000              .byte 0,0
 0282 0000              .byte 0,0
 0284 0000              .byte 0,0
 0286 0000              .byte 0,0
 0288 FFFF              .byte 255,255
 028A 0000              .byte 0,0
 028C 0000              .byte 0,0
 028E 0000              .byte 0,0
 0290 0000              .byte 0,0
 0292 0000              .byte 0,0
 0294 0000              .byte 0,0
 0296 0001              .byte 0,1
 0298 FFFF              .byte 255,255
 029A 0000              .byte 0,0
 029C 0000              .byte 0,0
 029E 0000              .byte 0,0
 02A0 0000              .byte 0,0
 02A2 0000              .byte 0,0
 02A4 0000              .byte 0,0
 02A6 0001              .byte 0,1
 02A8 DFFF              .byte 223,255
 02AA 0000              .byte 0,0
 02AC 0000              .byte 0,0
 02AE 0000              .byte 0,0
 02B0 0000              .byte 0,0
 02B2 0000              .byte 0,0
 02B4 0000              .byte 0,0
 02B6 0001              .byte 0,1
 02B8 1FFF              .byte 31,255
 02BA 0000              .byte 0,0
 02BC 0000              .byte 0,0
 02BE 0000              .byte 0,0
 02C0 0000              .byte 0,0
 02C2 0000              .byte 0,0
 02C4 0000              .byte 0,0
 02C6 0001              .byte 0,1
 02C8 BFFF              .byte 191,255
 02CA 0000              .byte 0,0
 02CC 0000              .byte 0,0
 02CE 0000              .byte 0,0
 02D0 0001              .byte 0,1
 02D2 F83C              .byte 248,60
 02D4 00CC              .byte 0,204
 02D6 0000              .byte 0,0
 02D8 FFFE              .byte 255,254
 02DA 0000              .byte 0,0
 02DC 0000              .byte 0,0
 02DE 0000              .byte 0,0
 02E0 001F              .byte 0,31
 02E2 6C37              .byte 'l,55
 02E4 F18C              .byte 241,140
 02E6 0000              .byte 0,0
 02E8 E7FE              .byte 231,254
 02EA 0000              .byte 0,0
 02EC 0000              .byte 0,0
 02EE 0000              .byte 0,0
 02F0 0003              .byte 0,3
 02F2 606F              .byte 96,'o
 02F4 37FF              .byte 55,255
 02F6 8000              .byte 128,0
 02F8 CFFC              .byte 207,252
 02FA 0000              .byte 0,0
 02FC 0000              .byte 0,0
 02FE 0000              .byte 0,0
 0300 001F              .byte 0,31
 0302 FE6C              .byte 254,'l
 0304 3679              .byte 54,'y
 0306 8000              .byte 128,0
 0308 EEF0              .byte 238,240
 030A 0000              .byte 0,0
 030C 0000              .byte 0,0
 030E 0000              .byte 0,0
 0310 0003              .byte 0,3
 0312 60EC              .byte 96,236
 0314 3671              .byte 54,'q
 0316 8000              .byte 128,0
 0318 7800              .byte 'x,0
 031A 0000              .byte 0,0
 031C 0000              .byte 0,0
 031E 0000              .byte 0,0
 0320 0003              .byte 0,3
 0322 EC6C              .byte 236,'l
 0324 3679              .byte 54,'y
 0326 8000              .byte 128,0
 0328 3C00              .byte 60,0
 032A 0000              .byte 0,0
 032C 0000              .byte 0,0
 032E 0000              .byte 0,0
 0330 0007              .byte 0,7
 0332 F86C              .byte 248,'l
 0334 37ED              .byte 55,237
 0336 8000              .byte 128,0
 0338 3E00              .byte 62,0
 033A 0000              .byte 0,0
 033C 0000              .byte 0,0
 033E 0000              .byte 0,0
 0340 001F              .byte 0,31
 0342 306C              .byte 48,'l
 0344 366D              .byte 54,'m
 0346 8000              .byte 128,0
 0348 7600              .byte 'v,0
 034A 0000              .byte 0,0
 034C 0000              .byte 0,0
 034E 0000              .byte 0,0
 0350 0003              .byte 0,3
 0352 766C              .byte 'v,'l
 0354 3661              .byte 54,'a
 0356 8000              .byte 128,0
 0358 0600              .byte 6,0
 035A 0000              .byte 0,0
 035C 0000              .byte 0,0
 035E 0000              .byte 0,0
 0360 0003              .byte 0,3
 0362 DE6C              .byte 222,'l
 0364 37E1              .byte 55,225
 0366 8000              .byte 128,0
 0368 0600              .byte 6,0
 036A 0000              .byte 0,0
 036C 0000              .byte 0,0
 036E 0000              .byte 0,0
 0370 000F              .byte 0,15
 0372 0E6C              .byte 14,'l
 0374 F66F              .byte 246,'o
 0376 0000              .byte 0,0
 0378 0600              .byte 6,0
 037A 0000              .byte 0,0
 037C 0000              .byte 0,0
 037E 0000              .byte 0,0
 0380 0000              .byte 0,0
 0382 0000              .byte 0,0
 0384 0000              .byte 0,0
 0386 0000              .byte 0,0
 0388 0000              .byte 0,0
 038A 0000              .byte 0,0
 038C 0000              .byte 0,0
 038E 0000              .byte 0,0
 0390 0000              .byte 0,0
 0392 0000              .byte 0,0
 0394 0000              .byte 0,0
 0396 0000              .byte 0,0
 0398 0000              .byte 0,0
 039A 0000              .byte 0,0
 039C 0000              .byte 0,0
 039E 0000              .byte 0,0
 03A0 0000              .byte 0,0
 03A2 0000              .byte 0,0
 03A4 0000              .byte 0,0
 03A6 0000              .byte 0,0
 03A8 0000              .byte 0,0
 03AA 0000              .byte 0,0
 03AC 0000              .byte 0,0
 03AE 0000              .byte 0,0
 03B0 0000              .byte 0,0
 03B2 0000              .byte 0,0
 03B4 0000              .byte 0,0
 03B6 0000              .byte 0,0
 03B8 0000              .byte 0,0
 03BA 0000              .byte 0,0
 03BC 0000              .byte 0,0
 03BE 0000              .byte 0,0
 03C0 0000              .byte 0,0
 03C2 0000              .byte 0,0
 03C4 0000              .byte 0,0
 03C6 0000              .byte 0,0
 03C8 0000              .byte 0,0
 03CA 0000              .byte 0,0
 03CC 0000              .byte 0,0
 03CE 0000              .byte 0,0
 03D0 0000              .byte 0,0
 03D2 0000              .byte 0,0
 03D4 0000              .byte 0,0
 03D6 0000              .byte 0,0
 03D8 0000              .byte 0,0
 03DA 0000              .byte 0,0
 03DC 0000              .byte 0,0
 03DE 0000              .byte 0,0
 03E0 0000              .byte 0,0
 03E2 0000              .byte 0,0
 03E4 0000              .byte 0,0
 03E6 0000              .byte 0,0
 03E8 0000              .byte 0,0
 03EA 0000              .byte 0,0
 03EC 0000              .byte 0,0
 03EE 0000              .byte 0,0
 03F0 0000              .byte 0,0
 03F2 0000              .byte 0,0
 03F4 0000              .byte 0,0
 03F6 0000              .byte 0,0
 03F8 0000              .byte 0,0
 03FA 0000              .byte 0,0
 03FC 0000              .byte 0,0
 03FE 0000              .byte 0,0
 0400 0000              .byte 0,0
 0402 0000              .byte 0,0
 0404 0000              .byte 0,0
 0406 0000              .byte 0,0
 0408 0000              .byte 0,0
 040A 0000              .byte 0,0
 040C 0000              .byte 0,0
 040E 0000              .byte 0,0
 0410 0000              .byte 0,0
 0412 0000              .byte 0,0
 0414 0000              .byte 0,0
 0416 0000              .byte 0,0
 0418 0000              .byte 0,0
 041A 0000              .byte 0,0
 041C 0000              .byte 0,0
 041E 0000              .byte 0,0
 0420 0000              .byte 0,0
 0422 0000              .byte 0,0
 0424 0000              .byte 0,0
 0426 0000              .byte 0,0
 0428 0000              .byte 0,0
 042A 0000              .byte 0,0
 042C 0000              .byte 0,0
 042E 0000              .byte 0,0
 0430                   .dbsym e logo _logo A[1072:1072]kc
                        .area text(rom, con, rel)
 0000                   .dbfile D:\工作\制版成功\YL-60A~2\YL-60A~2\4.相关例程\9.AVR_12864_串行\12864.c
 0000                   .dbfunc e Lcd_init _Lcd_init fV
                        .even
 0000           _Lcd_init::
 0000                   .dbline -1
 0000                   .dbline 106
 0000           ; /******************************************************************************/
 0000           ; /*【编写时间】： 2011.07.07
 0000           ; * 【作    者】： 雁翎电子
 0000           ; * 【版    本】： V1.0
 0000           ; * 【网    站】： http://ylelectronic.taobao.com/ 
 0000           ; * 【Q      Q】： 348439350
 0000           ; * 【编译环境】： ICCAVR  
 0000           ; * 【函数功能】： 12864 串行显示 
 0000           ; * 【晶    振】:  8M           
 0000           ; * 【芯    片】:  ATMEGA16A     
 0000           ; * 【硬件连接】： J2短路帽拿掉 
 0000           ; /******************************************************************************/
 0000           ; #include <iom16v.h>
 0000           ; #include <macros.h>
 0000           ; #define Set_Bit(val, bitn)    (val |=(1<<(bitn))) 
 0000           ; #define Clr_Bit(val, bitn)    (val&=~(1<<(bitn))) 
 0000           ; //12864
 0000           ; void Write_char(unsigned char start, unsigned char ddata);
 0000           ; void Send_byte(unsigned char bbyte);
 0000           ; void Delaynms(unsigned int di);
 0000           ; void Lcd_init(void);
 0000           ; void Disp_img(unsigned char const *img);
 0000           ; 
 0000           ; //unsigned char  num[]=    {"0123456789_:.V"};
 0000           ; //unsigned char  welcome[]={"我的电脑:"};
 0000           ; //unsigned char  input[]  ={"我的文档:"};
 0000           ; //unsigned char  network[]={"网上邻居:"};
 0000           ; //unsigned char  internet[]={"Internet:"};
 0000           ; #pragma data:code
 0000           ; /**************************************************************/
 0000           ;  unsigned  char const logo[]={  
 0000           ; /*--  调入了一幅图像：C:\Documents and Settings\lwd\桌面\AVR程序\AVR_12864_串行\b01.bmp  --*/
 0000           ; /*--  宽度x高度=127x63  --*/
 0000           ; /*--  宽度不是8的倍数，现调整为：宽度x高度=128x63  --*/
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0xF3,0xE0,0x0F,0x8F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0xF3,0xF0,0x0F,0x8F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x07,0xF9,0xF0,0x0F,0x9F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x07,0xF9,0xF8,0x1F,0x9F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x07,0xF9,0xF8,0x1F,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x0F,0xFC,0xF8,0x1F,0x3F,0x1F,0x80,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFC,0x00,
 0000           ; 0x00,0x0F,0xFC,0xFC,0x3F,0x3F,0x1F,0x80,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFC,0x00,
 0000           ; 0x00,0x0F,0xFC,0x7C,0x3E,0x3E,0x1F,0x80,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFC,0x00,
 0000           ; 0x00,0x1F,0xFE,0x7C,0x7E,0x7E,0x3F,0x00,0x20,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,
 0000           ; 0x00,0x1F,0xBE,0x7E,0x7E,0x7E,0xFF,0x00,0x70,0x00,0x00,0x0D,0xBF,0xDF,0xB0,0x00,
 0000           ; 0x00,0x1F,0x3E,0x3E,0x7C,0x7F,0xFF,0x00,0x70,0x00,0x00,0x1D,0xFF,0xDF,0xB0,0x00,
 0000           ; 0x00,0x3F,0x3F,0x3E,0x7C,0xFF,0xFE,0x00,0x70,0x00,0x00,0x1D,0xFF,0xD8,0x30,0x00,
 0000           ; 0x00,0x3F,0x1F,0x3F,0xFC,0xFF,0xFC,0x00,0x60,0x00,0x00,0x3D,0xF6,0xD8,0x30,0x00,
 0000           ; 0x00,0x3F,0x1F,0x9F,0xF8,0xFF,0xF0,0x00,0xE0,0x00,0x00,0x3D,0xF6,0xDF,0xB0,0x00,
 0000           ; 0x00,0x3F,0xFF,0x9F,0xF9,0xFF,0xE0,0x00,0xC0,0x00,0x00,0x7D,0xF6,0xDF,0xB0,0x00,
 0000           ; 0x00,0x7F,0xFF,0x9F,0xF9,0xFB,0xE0,0x00,0x40,0x00,0x00,0xED,0xF6,0xD8,0x30,0x00,
 0000           ; 0x00,0x7F,0xFF,0xCF,0xF1,0xF3,0xF0,0x00,0x40,0x00,0x00,0xED,0xF6,0xD8,0x30,0x00,
 0000           ; 0x00,0x7F,0xFF,0xCF,0xF3,0xF3,0xF0,0x00,0x40,0x00,0x00,0xED,0xF6,0xDF,0xB0,0x00,
 0000           ; 0x00,0xFF,0xFF,0xCF,0xF3,0xF1,0xF0,0x00,0x60,0x00,0x01,0xFF,0xFF,0xFF,0xFE,0x00,
 0000           ; 0x00,0xF8,0x07,0xE7,0xE3,0xE1,0xF0,0x08,0x20,0x1E,0x01,0xFF,0xFF,0xFF,0xFE,0x00,
 0000           ; 0x00,0xF8,0x03,0xE7,0xE7,0xE1,0xF8,0xFF,0x3C,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x01,0xF8,0x03,0xE3,0xE7,0xE1,0xF9,0xFF,0xFF,0xF7,0x80,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0xF0,0x01,0xE3,0xC7,0xC0,0xF9,0xE0,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x80,0x7C,0xFC,0xC0,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x7F,0xFC,0xF0,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x7F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x27,0xFF,0xB0,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x37,0xFF,0x10,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x1C,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x0C,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xDF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xBF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x01,0xF8,0x3C,0x00,0xCC,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x1F,0x6C,0x37,0xF1,0x8C,0x00,0x00,0xE7,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0x60,0x6F,0x37,0xFF,0x80,0x00,0xCF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x1F,0xFE,0x6C,0x36,0x79,0x80,0x00,0xEE,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0x60,0xEC,0x36,0x71,0x80,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0xEC,0x6C,0x36,0x79,0x80,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x07,0xF8,0x6C,0x37,0xED,0x80,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x1F,0x30,0x6C,0x36,0x6D,0x80,0x00,0x76,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0x76,0x6C,0x36,0x61,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x03,0xDE,0x6C,0x37,0xE1,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x0F,0x0E,0x6C,0xF6,0x6F,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0000           ; };
 0000           ; 
 0000           ; /******************************************************************************/
 0000           ; void Lcd_init(void)   //初始化LCD 
 0000           ; {
 0000                   .dbline 107
 0000           ;       Delaynms(10); //启动等待，等LCM讲入工作状态
 0000 0AE0              ldi R16,10
 0002 10E0              ldi R17,0
 0004 49D0              xcall _Delaynms
 0006                   .dbline 108
 0006           ;       Set_Bit(PORTA,0);
 0006 D89A              sbi 0x1b,0
 0008                   .dbline 109
 0008           ;       Write_char(0,0x30);  //8 位介面，基本指令集
 0008 20E3              ldi R18,48
 000A 0027              clr R16
 000C 0FD0              xcall _Write_char
 000E                   .dbline 110
 000E           ;       Delaynms(10);
 000E 0AE0              ldi R16,10
 0010 10E0              ldi R17,0
 0012 42D0              xcall _Delaynms
 0014                   .dbline 111
 0014           ;       Write_char(0,0x0c);  //显示打开，光标关，反白关
 0014 2CE0              ldi R18,12
 0016 0027              clr R16
 0018 09D0              xcall _Write_char
 001A                   .dbline 112
 001A           ;       Delaynms(10);
 001A 0AE0              ldi R16,10
 001C 10E0              ldi R17,0
 001E 3CD0              xcall _Delaynms
 0020                   .dbline 113
 0020           ;       Write_char(0,0x01);  //清屏，将DDRAM的地址计数器归零  
 0020 21E0              ldi R18,1
 0022 0027              clr R16
 0024 03D0              xcall _Write_char
 0026                   .dbline 114
 0026           ;       Delaynms(10);
 0026 0AE0              ldi R16,10
 0028 10E0              ldi R17,0
 002A                   .dbline -2
 002A           L1:
 002A                   .dbline 0 ; func end
 002A 36C0              xjmp _Delaynms
 002C                   .dbend
 002C                   .dbfunc e Write_char _Write_char fV
 002C           ;          Ldata -> R20
 002C           ;          Hdata -> R22
 002C           ;     start_data -> R10
 002C           ;          ddata -> R20
 002C           ;          start -> R10
                        .even
 002C           _Write_char::
 002C 0E940000          xcall push_xgsetF00C
 0030 422F              mov R20,R18
 0032 A02E              mov R10,R16
 0034                   .dbline -1
 0034                   .dbline 119
 0034           ; }
 0034           ; 
 0034           ; /******************************************************************************/
 0034           ; void Write_char(unsigned char start, unsigned char ddata) //写指令或数据
 0034           ; {
 0034                   .dbline 121
 0034           ;       unsigned char start_data,Hdata,Ldata;
 0034           ;       if(start==0) 
 0034 AA20              tst R10
 0036 19F4              brne L3
 0038           X0:
 0038                   .dbline 122
 0038           ;               start_data=0xf8;         //写指令
 0038 88EF              ldi R24,248
 003A A82E              mov R10,R24
 003C 02C0              xjmp L4
 003E           L3:
 003E                   .dbline 124
 003E           ;     else    
 003E           ;       start_data=0xfa;  //写数据
 003E 8AEF              ldi R24,250
 0040 A82E              mov R10,R24
 0042           L4:
 0042                   .dbline 126
 0042           ;   
 0042           ;       Hdata=ddata&0xf0;                 //取高四位
 0042 642F              mov R22,R20
 0044 607F              andi R22,240
 0046                   .dbline 127
 0046           ;       Ldata=(ddata<<4)&0xf0;  //取低四位
 0046 842F              mov R24,R20
 0048 8F70              andi R24,#0x0F
 004A 8295              swap R24
 004C 807F              andi R24,240
 004E 482F              mov R20,R24
 0050                   .dbline 128
 0050           ;       Send_byte(start_data);    //发送起始信号
 0050 0A2D              mov R16,R10
 0052 0FD0              xcall _Send_byte
 0054                   .dbline 129
 0054           ;       Delaynms(10); //延时是必须的
 0054 0AE0              ldi R16,10
 0056 10E0              ldi R17,0
 0058 1FD0              xcall _Delaynms
 005A                   .dbline 130
 005A           ;       Send_byte(Hdata);             //发送高四位
 005A 062F              mov R16,R22
 005C 0AD0              xcall _Send_byte
 005E                   .dbline 131
 005E           ;       Delaynms(10);  //延时是必须的
 005E 0AE0              ldi R16,10
 0060 10E0              ldi R17,0
 0062 1AD0              xcall _Delaynms
 0064                   .dbline 132
 0064           ;       Send_byte(Ldata);                 //发送低四位
 0064 042F              mov R16,R20
 0066 05D0              xcall _Send_byte
 0068                   .dbline 133
 0068           ;       Delaynms(10);  //延时是必须的
 0068 0AE0              ldi R16,10
 006A 10E0              ldi R17,0
 006C 15D0              xcall _Delaynms
 006E                   .dbline -2
 006E           L2:
 006E                   .dbline 0 ; func end
 006E 0C940000          xjmp pop_xgsetF00C
 0072                   .dbsym r Ldata 20 c
 0072                   .dbsym r Hdata 22 c
 0072                   .dbsym r start_data 10 c
 0072                   .dbsym r ddata 20 c
 0072                   .dbsym r start 10 c
 0072                   .dbend
 0072                   .dbfunc e Send_byte _Send_byte fV
 0072           ;              j -> R22
 0072           ;              i -> R20
 0072           ;          bbyte -> R16
                        .even
 0072           _Send_byte::
 0072 4A93              st -y,R20
 0074 6A93              st -y,R22
 0076                   .dbline -1
 0076                   .dbline 138
 0076           ; }
 0076           ; 
 0076           ; /******************************************************************************/
 0076           ; void Send_byte(unsigned char bbyte) //发送一个字节
 0076           ; {
 0076                   .dbline 140
 0076           ;       unsigned char i,j;
 0076           ;       for(i=0;i<8;i++)
 0076 4427              clr R20
 0078 0AC0              xjmp L9
 007A           L6:
 007A                   .dbline 141
 007A           ;       {    
 007A                   .dbline 143
 007A           ;           
 007A           ;               j=bbyte&0x80; //取出最高位
 007A 602F              mov R22,R16
 007C 6078              andi R22,128
 007E                   .dbline 144
 007E           ;               if(j)
 007E 11F0              breq L10
 0080           X1:
 0080                   .dbline 145
 0080           ;                       Set_Bit(PORTA,1);
 0080 D99A              sbi 0x1b,1
 0082 01C0              xjmp L11
 0084           L10:
 0084                   .dbline 147
 0084           ;               else
 0084           ;                       Clr_Bit(PORTA,1);
 0084 D998              cbi 0x1b,1
 0086           L11:
 0086                   .dbline 148
 0086           ;               Set_Bit(PORTA,2);
 0086 DA9A              sbi 0x1b,2
 0088                   .dbline 149
 0088           ;               Clr_Bit(PORTA,2);
 0088 DA98              cbi 0x1b,2
 008A                   .dbline 150
 008A           ;               bbyte<<=1; //左移
 008A 000F              lsl R16
 008C                   .dbline 151
 008C           ;       }  
 008C           L7:
 008C                   .dbline 140
 008C 4395              inc R20
 008E           L9:
 008E                   .dbline 140
 008E 4830              cpi R20,8
 0090 A0F3              brlo L6
 0092           X2:
 0092                   .dbline -2
 0092           L5:
 0092                   .dbline 0 ; func end
 0092 6991              ld R22,y+
 0094 4991              ld R20,y+
 0096 0895              ret
 0098                   .dbsym r j 22 c
 0098                   .dbsym r i 20 c
 0098                   .dbsym r bbyte 16 c
 0098                   .dbend
 0098                   .dbfunc e Delaynms _Delaynms fV
 0098           ;             da -> R20,R21
 0098           ;             db -> R22,R23
 0098           ;             di -> R16,R17
                        .even
 0098           _Delaynms::
 0098 0E940000          xcall push_xgsetF000
 009C                   .dbline -1
 009C                   .dbline 156
 009C           ; }
 009C           ; 
 009C           ; /******************************************************************************/
 009C           ; void Delaynms(unsigned int di) //延时
 009C           ; {
 009C                   .dbline 158
 009C           ;       unsigned int da,db;
 009C           ;       for(da=0;da<di;da++)
 009C 4427              clr R20
 009E 5527              clr R21
 00A0 0BC0              xjmp L16
 00A2           L13:
 00A2                   .dbline 159
 00A2           ;               for(db=0;db<10;db++);
 00A2 6627              clr R22
 00A4 7727              clr R23
 00A6 02C0              xjmp L20
 00A8           L17:
 00A8                   .dbline 159
 00A8           L18:
 00A8                   .dbline 159
 00A8 6F5F              subi R22,255  ; offset = 1
 00AA 7F4F              sbci R23,255
 00AC           L20:
 00AC                   .dbline 159
 00AC 6A30              cpi R22,10
 00AE E0E0              ldi R30,0
 00B0 7E07              cpc R23,R30
 00B2 D0F3              brlo L17
 00B4           X3:
 00B4           L14:
 00B4                   .dbline 158
 00B4 4F5F              subi R20,255  ; offset = 1
 00B6 5F4F              sbci R21,255
 00B8           L16:
 00B8                   .dbline 158
 00B8 4017              cp R20,R16
 00BA 5107              cpc R21,R17
 00BC 90F3              brlo L13
 00BE           X4:
 00BE                   .dbline -2
 00BE           L12:
 00BE                   .dbline 0 ; func end
 00BE 0C940000          xjmp pop_xgsetF000
 00C2                   .dbsym r da 20 i
 00C2                   .dbsym r db 22 i
 00C2                   .dbsym r di 16 i
 00C2                   .dbend
 00C2                   .dbfunc e Disp_img _Disp_img fV
 00C2           ;              i -> R20
 00C2           ;              k -> R22,R23
 00C2           ;              j -> R12
 00C2           ;            img -> R10,R11
                        .even
 00C2           _Disp_img::
 00C2 0E940000          xcall push_xgsetF03C
 00C6 5801              movw R10,R16
 00C8                   .dbline -1
 00C8                   .dbline 164
 00C8           ; }
 00C8           ; 
 00C8           ; /****************************************************************************/
 00C8           ; void Disp_img(unsigned char const *img )      //图形方式12864显示字模221 横向取膜
 00C8           ; { 
 00C8                   .dbline 166
 00C8           ;       unsigned char i,j;
 00C8           ;       unsigned int k = 0;
 00C8 6627              clr R22
 00CA 7727              clr R23
 00CC                   .dbline 167
 00CC           ;     Delaynms(100);//延时好重要!!!!!!AVR太快了
 00CC 04E6              ldi R16,100
 00CE 10E0              ldi R17,0
 00D0 E3DF              xcall _Delaynms
 00D2                   .dbline 168
 00D2           ;       Write_char(0,0x36); //图形方式
 00D2 26E3              ldi R18,54
 00D4 0027              clr R16
 00D6 AADF              xcall _Write_char
 00D8                   .dbline 169
 00D8           ;       Delaynms(100);//延时好重要!!!!!!AVR太快了
 00D8 04E6              ldi R16,100
 00DA 10E0              ldi R17,0
 00DC DDDF              xcall _Delaynms
 00DE                   .dbline 170
 00DE           ;       for(i=0;i<32;i++)
 00DE 4427              clr R20
 00E0 17C0              xjmp L25
 00E2           L22:
 00E2                   .dbline 171
 00E2           ;       { 
 00E2                   .dbline 172
 00E2           ;               Write_char(0,0x80+i); //Y
 00E2 242F              mov R18,R20
 00E4 2058              subi R18,128    ; addi 128
 00E6 0027              clr R16
 00E8 A1DF              xcall _Write_char
 00EA                   .dbline 173
 00EA           ;               Write_char(0,0x80);       //X
 00EA 20E8              ldi R18,128
 00EC 0027              clr R16
 00EE 9EDF              xcall _Write_char
 00F0                   .dbline 174
 00F0           ;       for(j=0;j<16;j++) 
 00F0 CC24              clr R12
 00F2 0AC0              xjmp L29
 00F4           L26:
 00F4                   .dbline 175
 00F4           ;               {
 00F4                   .dbline 176
 00F4           ;                       Write_char(1,img[k++]); 
 00F4 1B01              movw R2,R22
 00F6 6F5F              subi R22,255  ; offset = 1
 00F8 7F4F              sbci R23,255
 00FA F101              movw R30,R2
 00FC EA0D              add R30,R10
 00FE FB1D              adc R31,R11
 0100 2491              lpm R18,Z
 0102 01E0              ldi R16,1
 0104 93DF              xcall _Write_char
 0106                   .dbline 177
 0106           ;               }
 0106           L27:
 0106                   .dbline 174
 0106 C394              inc R12
 0108           L29:
 0108                   .dbline 174
 0108 8C2D              mov R24,R12
 010A 8031              cpi R24,16
 010C 98F3              brlo L26
 010E           X5:
 010E                   .dbline 178
 010E           ;       }
 010E           L23:
 010E                   .dbline 170
 010E 4395              inc R20
 0110           L25:
 0110                   .dbline 170
 0110 4032              cpi R20,32
 0112 38F3              brlo L22
 0114           X6:
 0114                   .dbline 180
 0114           ; 
 0114           ;       for(i=0;i<32;i++)
 0114 4427              clr R20
 0116 17C0              xjmp L33
 0118           L30:
 0118                   .dbline 181
 0118           ;       { 
 0118                   .dbline 182
 0118           ;               Write_char(0,0x80+i);//Y
 0118 242F              mov R18,R20
 011A 2058              subi R18,128    ; addi 128
 011C 0027              clr R16
 011E 86DF              xcall _Write_char
 0120                   .dbline 183
 0120           ;               Write_char(0,0x88);  //X
 0120 28E8              ldi R18,136
 0122 0027              clr R16
 0124 83DF              xcall _Write_char
 0126                   .dbline 184
 0126           ;       for(j=0;j<16;j++) 
 0126 CC24              clr R12
 0128 0AC0              xjmp L37
 012A           L34:
 012A                   .dbline 185
 012A           ;               {
 012A                   .dbline 186
 012A           ;                       Write_char(1,img[k++]);
 012A 1B01              movw R2,R22
 012C 6F5F              subi R22,255  ; offset = 1
 012E 7F4F              sbci R23,255
 0130 F101              movw R30,R2
 0132 EA0D              add R30,R10
 0134 FB1D              adc R31,R11
 0136 2491              lpm R18,Z
 0138 01E0              ldi R16,1
 013A 78DF              xcall _Write_char
 013C                   .dbline 187
 013C           ;               }
 013C           L35:
 013C                   .dbline 184
 013C C394              inc R12
 013E           L37:
 013E                   .dbline 184
 013E 8C2D              mov R24,R12
 0140 8031              cpi R24,16
 0142 98F3              brlo L34
 0144           X7:
 0144                   .dbline 188
 0144           ;       }
 0144           L31:
 0144                   .dbline 180
 0144 4395              inc R20
 0146           L33:
 0146                   .dbline 180
 0146 4032              cpi R20,32
 0148 38F3              brlo L30
 014A           X8:
 014A                   .dbline -2
 014A           L21:
 014A                   .dbline 0 ; func end
 014A 0C940000          xjmp pop_xgsetF03C
 014E                   .dbsym r i 20 c
 014E                   .dbsym r k 22 i
 014E                   .dbsym r j 12 c
 014E                   .dbsym r img 10 pkc
 014E                   .dbend
 014E                   .dbfunc e Clr_Scr _Clr_Scr fV
                        .even
 014E           _Clr_Scr::
 014E                   .dbline -1
 014E                   .dbline 193
 014E           ; }
 014E           ; 
 014E           ; /******************************************************************************/
 014E           ; void Clr_Scr(void)//清屏函数
 014E           ; {
 014E                   .dbline 194
 014E           ;       Write_char(0,0x01);
 014E 21E0              ldi R18,1
 0150 0027              clr R16
 0152                   .dbline -2
 0152           L38:
 0152                   .dbline 0 ; func end
 0152 6CCF              xjmp _Write_char
 0154                   .dbend
 0154                   .dbfunc e LCD_set_xy _LCD_set_xy fV
 0154           ;        address -> R20
 0154           ;              y -> R22
 0154           ;              x -> R10
                        .even
 0154           _LCD_set_xy::
 0154 0E940000          xcall push_xgsetF00C
 0158 622F              mov R22,R18
 015A A02E              mov R10,R16
 015C                   .dbline -1
 015C                   .dbline 199
 015C           ; }
 015C           ; 
 015C           ; /******************************************************************************/
 015C           ; void LCD_set_xy( unsigned char x, unsigned char y )
 015C           ; {     //设置LCD显示的起始位置，X为行，Y为列
 015C                   .dbline 201
 015C           ;     unsigned char address;
 015C           ;       switch(x)
 015C 4A2D              mov R20,R10
 015E 5527              clr R21
 0160 4030              cpi R20,0
 0162 4507              cpc R20,R21
 0164 89F0              breq L43
 0166           X9:
 0166 4130              cpi R20,1
 0168 E0E0              ldi R30,0
 016A 5E07              cpc R21,R30
 016C 81F0              breq L44
 016E           X10:
 016E 4230              cpi R20,2
 0170 E0E0              ldi R30,0
 0172 5E07              cpc R21,R30
 0174 79F0              breq L45
 0176           X11:
 0176 4330              cpi R20,3
 0178 E0E0              ldi R30,0
 017A 5E07              cpc R21,R30
 017C 71F0              breq L46
 017E           X12:
 017E 4430              cpi R20,4
 0180 E0E0              ldi R30,0
 0182 5E07              cpc R21,R30
 0184 69F0              breq L47
 0186           X13:
 0186 0FC0              xjmp L40
 0188           L43:
 0188                   .dbline 203
 0188           ;       {
 0188           ;               case 0: address = 0x80 + y; break;    
 0188 462F              mov R20,R22
 018A 4058              subi R20,128    ; addi 128
 018C                   .dbline 203
 018C 0EC0              xjmp L41
 018E           L44:
 018E                   .dbline 204
 018E           ;       case 1: address = 0x80 + y; break; 
 018E 462F              mov R20,R22
 0190 4058              subi R20,128    ; addi 128
 0192                   .dbline 204
 0192 0BC0              xjmp L41
 0194           L45:
 0194                   .dbline 205
 0194           ;               case 2: address = 0x90 + y; break; 
 0194 462F              mov R20,R22
 0196 4057              subi R20,112    ; addi 144
 0198                   .dbline 205
 0198 08C0              xjmp L41
 019A           L46:
 019A                   .dbline 206
 019A           ;               case 3: address = 0x88 + y; break;
 019A 462F              mov R20,R22
 019C 4857              subi R20,120    ; addi 136
 019E                   .dbline 206
 019E 05C0              xjmp L41
 01A0           L47:
 01A0                   .dbline 207
 01A0           ;               case 4: address = 0x98 + y; break; 
 01A0 462F              mov R20,R22
 01A2 4856              subi R20,104    ; addi 152
 01A4                   .dbline 207
 01A4 02C0              xjmp L41
 01A6           L40:
 01A6                   .dbline 208
 01A6           ;               default:address = 0x80 + y; break;
 01A6 462F              mov R20,R22
 01A8 4058              subi R20,128    ; addi 128
 01AA                   .dbline 208
 01AA           L41:
 01AA                   .dbline 210
 01AA           ;       }
 01AA           ;     Write_char(0, address);
 01AA 242F              mov R18,R20
 01AC 0027              clr R16
 01AE 3EDF              xcall _Write_char
 01B0                   .dbline -2
 01B0           L39:
 01B0                   .dbline 0 ; func end
 01B0 0C940000          xjmp pop_xgsetF00C
 01B4                   .dbsym r address 20 c
 01B4                   .dbsym r y 22 c
 01B4                   .dbsym r x 10 c
 01B4                   .dbend
 01B4                   .dbfunc e LCD_Write_string _LCD_Write_string fV
 01B4           ;              s -> R20,R21
 01B4           ;              Y -> R12
 01B4           ;              X -> R10
                        .even
 01B4           _LCD_Write_string::
 01B4 0E940000          xcall push_xgset303C
 01B8 C22E              mov R12,R18
 01BA A02E              mov R10,R16
 01BC 4E81              ldd R20,y+6
 01BE 5F81              ldd R21,y+7
 01C0                   .dbline -1
 01C0                   .dbline 215
 01C0           ; }
 01C0           ; 
 01C0           ; /******************************************************************************/
 01C0           ; void LCD_Write_string(unsigned char X,unsigned char Y,unsigned char *s)
 01C0           ; {     //      中英文字符串显示函数
 01C0                   .dbline 216
 01C0           ;       LCD_set_xy( X, Y );   
 01C0 2C2D              mov R18,R12
 01C2 0A2D              mov R16,R10
 01C4 C7DF              xcall _LCD_set_xy
 01C6 09C0              xjmp L50
 01C8           L49:
 01C8                   .dbline 218
 01C8           ;     while (*s) 
 01C8           ;     {
 01C8                   .dbline 219
 01C8           ;               Write_char( 1, *s );
 01C8 FA01              movw R30,R20
 01CA 2081              ldd R18,z+0
 01CC 01E0              ldi R16,1
 01CE 2EDF              xcall _Write_char
 01D0                   .dbline 220
 01D0           ;           s ++;
 01D0 4F5F              subi R20,255  ; offset = 1
 01D2 5F4F              sbci R21,255
 01D4                   .dbline 221
 01D4           ;               Delaynms(1);
 01D4 01E0              ldi R16,1
 01D6 10E0              ldi R17,0
 01D8 5FDF              xcall _Delaynms
 01DA                   .dbline 222
 01DA           ;       }
 01DA           L50:
 01DA                   .dbline 217
 01DA FA01              movw R30,R20
 01DC 2080              ldd R2,z+0
 01DE 2220              tst R2
 01E0 99F7              brne L49
 01E2           X14:
 01E2                   .dbline -2
 01E2           L48:
 01E2                   .dbline 0 ; func end
 01E2 0C940000          xjmp pop_xgset303C
 01E6                   .dbsym r s 20 pc
 01E6                   .dbsym r Y 12 c
 01E6                   .dbsym r X 10 c
 01E6                   .dbend
 01E6                   .dbfunc e main _main fV
                        .even
 01E6           _main::
 01E6                   .dbline -1
 01E6                   .dbline 242
 01E6           ; }
 01E6           ; /*******************************************************************************/
 01E6           ; //void LCD_Write_number(unsigned char s)//    数字显示函数
 01E6           ; //{   
 01E6           ;       //Write_char(1,num[s]);
 01E6           ;       //Delaynms(1);
 01E6           ; //}
 01E6           ; /******************************************************************************/
 01E6           ; //void Lcd_Mark2(void)
 01E6           ; //{
 01E6           ;       ///Clr_Scr();//清屏
 01E6           ;       //Delaynms(10);
 01E6           ;       //LCD_Write_string(1,0,welcome);//
 01E6           ;       //LCD_Write_string(2,0,input);
 01E6           ;       //LCD_Write_string(3,0,network);
 01E6           ;       //LCD_Write_string(4,0,internet);
 01E6           ; //}
 01E6           ; /******************************************************************************/
 01E6           ; void main(void)//主函数
 01E6           ; {
 01E6                   .dbline 243
 01E6           ;       DDRA|=BIT(0)|BIT(1)|BIT(2);//设置PA0,PA1,PA2为输出
 01E6 8AB3              in R24,0x1a
 01E8 8760              ori R24,7
 01EA 8ABB              out 0x1a,R24
 01EC                   .dbline 244
 01EC           ;       PORTA=0xFF; //输出
 01EC 8FEF              ldi R24,255
 01EE 8BBB              out 0x1b,R24
 01F0                   .dbline 246
 01F0           ;       
 01F0           ;       DDRC|=1<<0;//设置PC0为输出  串行模式
 01F0 A09A              sbi 0x14,0
 01F2                   .dbline 247
 01F2           ;       PORTC=0x00;
 01F2 2224              clr R2
 01F4 25BA              out 0x15,R2
 01F6                   .dbline 248
 01F6           ;     Delaynms(1000);//显示画面等待时间
 01F6 08EE              ldi R16,1000
 01F8 13E0              ldi R17,3
 01FA 4EDF              xcall _Delaynms
 01FC                   .dbline 249
 01FC           ;       Lcd_init();//设置液晶显示器
 01FC 01DF              xcall _Lcd_init
 01FE                   .dbline 250
 01FE           ;       Clr_Scr();//清屏        
 01FE A7DF              xcall _Clr_Scr
 0200                   .dbline 251
 0200           ;       Disp_img(logo); //显示我们的AVR
 0200 00E0              ldi R16,<_logo
 0202 10E0              ldi R17,>_logo
 0204 5EDF              xcall _Disp_img
 0206           L53:
 0206                   .dbline 255
 0206           ;       //Delaynms(30000);//显示画面等待时间
 0206           ;    // Lcd_init();
 0206           ;       //Lcd_Mark2();   
 0206           ;     while(1);
 0206           L54:
 0206                   .dbline 255
 0206 FFCF              xjmp L53
 0208           X15:
 0208                   .dbline -2
 0208           L52:
 0208                   .dbline 0 ; func end
 0208 0895              ret
 020A                   .dbend
 020A           ; } //ENDmain
 020A           ; 
